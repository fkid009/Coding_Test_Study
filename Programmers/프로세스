def solution(priorities, location):    
    from collections import Counter
    prior_list = [[x, y] for x, y in zip(priorities, range(len(priorities)))]
    answer_list = list()
    idx, chk, max_cnt = 0, 0, 0
    prior_order = list(set(priorities))
    prior_order.sort(reverse= True)
    prior_cnt = Counter(priorities)
    while len(answer_list) < len(priorities):
        if prior_list[idx][0] == prior_order[max_cnt]:
            answer_list.append(prior_list[idx][1])
            chk += 1
            if chk == prior_cnt[prior_order[max_cnt]]:
                max_cnt += 1
                chk = 0
        if idx == len(priorities) - 1:
            idx = 0
        else:
            idx +=1
    print(answer_list)
    return answer_list.index(location) + 1

###Best
def solution(priorities, location):
    queue =  [(i,p) for i,p in enumerate(priorities)]
    answer = 0
    while True:
        cur = queue.pop(0)
        if any(cur[1] < q[1] for q in queue):
            queue.append(cur)
        else:
            answer += 1
            if cur[0] == location:
                return answer
